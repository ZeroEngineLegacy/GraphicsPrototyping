[RunInEditor]
class GenerateAreaTex : ZilchComponent
{
  [ShaderInput("ColorMap", "Texture")] var Texture : Texture = Texture.White;
  
  var SizeOrtho : Integer = 16;
  
  function Initialize(init : CogInitializer)
  {
    this.Texture = Texture.CreateRuntime();
    
    timeout (9999)
    {
      var fullData = TextureData(TextureFormat.RG8, this.SizeOrtho * 5, this.SizeOrtho * 5);
      
      var subsampleOffsetsOrtho = Array[Real]() {0.0, -0.25, 0.25, -0.125, 0.125, -0.375, 0.375};
      var edgesOrtho = Array[Integer2]()
      {
        Integer2(0, 0), Integer2(3, 0), Integer2(0, 3), Integer2(3, 3), Integer2(1, 0), Integer2(4, 0), Integer2(1, 3), Integer2(4, 3),
        Integer2(0, 1), Integer2(3, 1), Integer2(0, 4), Integer2(3, 4), Integer2(1, 1), Integer2(4, 1), Integer2(1, 4), Integer2(4, 4)
      };
      
      var offset = subsampleOffsetsOrtho[0];
      
      for (var pattern = 0; pattern < 16; ++pattern)
      {
        var subData = this.Tex2dOrtho(pattern, offset);
        
        var indexOffset = edgesOrtho[pattern];
        for (var y = 0; y < this.SizeOrtho; ++y)
        {
          for (var x = 0; x < this.SizeOrtho; ++x)
          {
            fullData.Set(x + indexOffset.X * this.SizeOrtho, y + indexOffset.Y * this.SizeOrtho, subData.Get(x, y));
          }
        }
      }
      
      this.Texture.Upload(fullData);
    }
  }
  
  function Tex2dOrtho(pattern : Integer, offset : Real) : TextureData
  {
    //var size = (this.SizeOrtho - 1) * (this.SizeOrtho - 1) + 1;
    var size = this.SizeOrtho;
    var data = TextureData(TextureFormat.RG8, size, size);
    
    for (var y = 0; y < size; ++y)
    {
      for (var x = 0; x < size; ++x)
      {
        var p = this.AreaOrtho(pattern, x * x, y * y, offset);
        data.Set(x, y, Real4(p, 0.0, 0.0));
      }
    }
    
    return data;
  }
  
  function Area(p1 : Real2, p2 : Real2, x : Integer) : Real2
  {
    var d = Real2(p2[0] - p1[0], p2[1] - p1[1]);
    var x1 = x as Real;
    var x2 = x + 1.0;
    var y1 = p1[1] + d[1] * (x1 - p1[0]) / d[0];
    var y2 = p1[1] + d[1] * (x2 - p1[0]) / d[0];

    var inside = (x1 >= p1[0] && x1 < p2[0]) || (x2 > p1[0] && x2 <= p2[0]);
    if (inside)
    {
      var istrapezoid = (Math.Sign(y1) == Math.Sign(y2) || Math.Abs(y1) < 1.e-4 || Math.Abs(y2) < 1.e-4);
      if (istrapezoid)
      {
        var a = (y1 + y2) / 2.0;
        if (a < 0.0)
          return Real2(Math.Abs(a), 0.0);
        else
          return Real2(0.0, Math.Abs(a));
      }
      else // Then, we got two triangles:
      {
        var x0 = -p1[1] * d[0] / d[1] + p1[0];
        var a1 = 0.0;
        if (x0 > p1[0])
          a1 = y1 * Math.FMod(x0, 1.0) / 2.0;
        var a2 = 0.0;
        if (x0 < p2[0])
          a2 = y2 * (1.0 - Math.FMod(x0, 1.0)) / 2.0;
        var a = -a2;
        if (Math.Abs(a1) > Math.Abs(a2))
          a = a1;
        if (a < 0.0)
          return Real2(Math.Abs(a1), Math.Abs(a2));
        else
          return Real2(Math.Abs(a2), Math.Abs(a1));
      }
    }
    else
    {
      return Real2(0.0);
    }
  }
  
  function SmoothArea(d : Real, a : Real2) : Real2
  {
    var b = Math.Sqrt(a * 2.0) * 0.5;
    var smoothMaxDistance = 32.0;
    var p = Math.Saturate(d / smoothMaxDistance);
    return Math.Lerp(b, a, p);
  }
  
  // 0             4                         1             5            
  //                 |                                       |          
  //    ------       `------                   .------       +------    
  //                                           |             |          
  //                                                                    
  // 8            12                         9            13            
  //          |      |      |                         |      |      |   
  //    ------'      `------'                  .------'      +------'   
  //                                           |             |          
  //                                                                    
  //                                                                    
  //                                                                    
  //                                                                    
  //                                                                    
  //                                                                    
  // 2             6                         3             7            
  //                 |                                       |          
  //    ------.      `------.                  .------.      +------.   
  //          |             |                  |      |      |      |   
  //                                                                    
  //10            14                        11            15            
  //          |      |      |                         |      |      |   
  //    ------+      `------+                  .------+      +------+   
  //          |             |                  |      |      |      |   
  //                                                                    
  function AreaOrtho(pattern : Integer, left : Integer, right : Integer, offset : Real) : Real2
  {
    // o1           |
    //      .-------'
    // o2   |
    //
    //      <---d--->
    var d = left + right + 1;

    var o1 = 0.5 + offset;
    var o2 = 0.5 + offset - 1.0;

    //
    //    ------
    //   
    if (pattern == 0)
    {
      return Real2(0.0);
    }
    //
    //   .------
    //   |
    //
    else if (pattern == 1)
    {
      // We only offset L patterns in the crossing edge side, to make it
      // converge with the unfiltered pattern 0 (we don't want to filter the
      // pattern 0 to avoid artifacts).
      if (left <= right)
        return this.Area(Real2(0.0, o2), Real2(d / 2.0, 0.0), left);
      else
        return Real2(0.0);
    }
    //
    //    ------.
    //          |
    else if (pattern == 2)
    {
      if (left >= right)
        return this.Area(Real2(d / 2.0, 0.0), Real2(d, o2), left);
      else
        return Real2(0.0);
    }
    //
    //   .------.
    //   |      |
    else if (pattern == 3)
    {
      var a1 = this.Area(Real2(0.0, o2), Real2(d / 2.0, 0.0), left);
      var a2 = this.Area(Real2(d / 2.0, 0.0), Real2(d, o2), left);
      a1 = this.SmoothArea(d, a1);
      a2 = this.SmoothArea(d, a2);
      return Real2(a1[0] + a2[0], a1[1] + a2[1]);
    }
    //   |
    //   `------
    //          
    else if (pattern == 4)
    {
      if (left <= right)
        return this.Area(Real2(0.0, o1), Real2(d / 2.0, 0.0), left);
      else
        return Real2(0.0);
    }
    //   |
    //   +------
    //   |      
    else if (pattern == 5)
    {
      return Real2(0.0);
    }
    //   |       
    //   `------.
    //          |
    else if (pattern == 6)
    {
      // A problem of not offseting L patterns (see above), is that for certain
      // max search distances, the pixels in the center of a Z pattern will
      // detect the full Z pattern, while the pixels in the sides will detect a
      // L pattern. To avoid discontinuities, we blend the full offsetted Z
      // revectorization with partially offsetted L patterns.
      if (Math.Abs(offset) > 0.0)
      {
        var a1 =  this.Area(Real2(0.0, o1), Real2(d, o2), left);
        var a2 =  this.Area(Real2(0.0, o1), Real2(d / 2.0, 0.0), left);
        a2 += this.Area(Real2(d / 2.0, 0.0), Real2(d, o2), left);
        return (a1 + a2) / 2.0;
      }
      else
        return this.Area(Real2(0.0, o1), Real2(d, o2), left);
    }
    //   |       
    //   +------.
    //   |      |
    else if (pattern == 7)
    {
      return this.Area(Real2(0.0, o1), Real2(d, o2), left);
    }
    //          |
    //    ------'
    //   
    else if (pattern == 8)
    {
      if (left >= right)
        return this.Area(Real2(d / 2.0, 0.0), Real2(d, o1), left);
      else
        return Real2(0.0);
    }
    //          |
    //   .------'
    //   |       
    else if (pattern == 9)
    {
      if (Math.Abs(offset) > 0.0)
      {
        var a1 = this.Area(Real2(0.0, o2), Real2(d, o1), left);
        var a2 = this.Area(Real2(0.0, o2), Real2(d / 2.0, 0.0), left);
        a2 += this.Area(Real2(d / 2.0, 0.0), Real2(d, o1), left);
        return (a1 + a2) / 2.0;
      }
      else
        return this.Area(Real2(0.0, o2), Real2(d, o1), left);
    }
    //          |
    //    ------+
    //          |
    else if (pattern == 10)
    {
      return Real2(0.0);
    }
    //          |
    //   .------+
    //   |      |
    else if (pattern == 11)
    {
      return this.Area(Real2(0.0, o2), Real2(d, o1), left);
    }
    //   |      |
    //   `------'
    //   
    else if (pattern == 12)
    {
      var a1 = this.Area(Real2(0.0, o1), Real2(d / 2.0, 0.0), left);
      var a2 = this.Area(Real2(d / 2.0, 0.0), Real2(d, o1), left);
      a1 = this.SmoothArea(d, a1);
      a2 = this.SmoothArea(d, a2);
      return Real2(a1[0] + a2[0], a1[1] + a2[1]);
    }
    //   |      |
    //   +------'
    //   |       
    else if (pattern == 13)
    {
      return this.Area(Real2(0.0, o2), Real2(d, o1), left);
    }
    //   |      |
    //   `------+
    //          |
    else if (pattern == 14)
    {
      return this.Area(Real2(0.0, o1), Real2(d, o2), left);
    }
    //   |      |
    //   +------+
    //   |      |
    else if (pattern == 15)
    {
      return Real2(0.0);
    }
    
    return Real2(0.0);
  }
}
