//http://www.iryoku.com/smaa/downloads/SMAA-Enhanced-Subpixel-Morphological-Antialiasing.pdf
//http://www.cs.cmu.edu/afs/cs/academic/class/15869-f11/www/readings/reshetov09_mlaa.pdf
//Practical Morphological Anti-Aliasing GPU-Pro 2


[RunInEditor]
class Smaa : ZilchComponent
{
  
  [Property] var EnableSMAA : Boolean = true;
  [Property] var EnableDiagnols : Boolean = true;
  //Detect more edges with high setting.
  [Property] var EdgeDetection : DetectionChance = DetectionChance.Medium;
  //Switch to Edge and Blend Area to debug intermidiate textures.
  [Property] var TargetTexture : SMAARenderTargets = SMAARenderTargets.FinalBlend;
  [Property] var ClearColor : Real4 = Real4(0, 0, 0, 1);


  
  function LinearToGamma(event : RenderTasksEvent, inputBuffer : RenderTarget, outputBuffer : RenderTarget)
  {
    var toGamma = LinearToGammaPass();
    toGamma.Texture = inputBuffer.Texture;
    event.AddRenderTaskPostProcess(outputBuffer, toGamma);
  }
  
  function GammaToLinear(event : RenderTasksEvent, inputBuffer : RenderTarget, outputBuffer : RenderTarget)
  {
    var toLinear = GammaToLinearPass();
    toLinear.Texture = inputBuffer.Texture;
    event.AddRenderTaskPostProcess(outputBuffer, toLinear);
  }
  
  function AddRenderTask(event : RenderTasksEvent, lightBuffer : RenderTarget, depth : RenderTarget)
  {
    // Don't bother
    if(!this.EnableSMAA)
      return;
      
    // Sampler settings for filtering edges texture.
    var samplerSettings = SamplerSettings();
    samplerSettings.AddressingX = TextureAddressing.Clamp;
    samplerSettings.AddressingY = TextureAddressing.Clamp;
    samplerSettings.Filtering = TextureFiltering.Bilinear;
    samplerSettings.CompareFunc = TextureCompareFunc.Always;
    samplerSettings.CompareMode = TextureCompareMode.Enabled;
    
    var size = event.ViewportSize;
    var colorCopy = event.GetRenderTarget(size, TextureFormat.RGBA8, samplerSettings);
    var edges = event.GetRenderTarget(size, TextureFormat.RGBA8, samplerSettings);
    var areas = event.GetRenderTarget(size, TextureFormat.RGBA8, samplerSettings);
    var finalBlend = event.GetRenderTarget(size, TextureFormat.RGBA8, samplerSettings);
    
    var renderSettings = RenderSettings() {CullMode = CullMode.Disabled};
    renderSettings.DepthTarget = depth;
    renderSettings.CullMode = CullMode.Disabled;
    renderSettings.DepthSettings.DepthMode = DepthMode.Disabled;
    renderSettings.DepthSettings.DepthCompareFunc = TextureCompareFunc.LessEqual;
    
    
    // First pass, need predicated thresholding here.
    var postProcess = EdgeDetectionPostProcess();
    if(this.EdgeDetection == DetectionChance.Medium)
      postProcess.ComparisonThreshold = 0.1;
    else
      postProcess.ComparisonThreshold = 0.05;
    postProcess.Texture = lightBuffer.Texture;
    renderSettings.ColorTarget = edges;
    event.AddRenderTaskClearTarget(renderSettings, this.ClearColor, 1.0);
    event.AddRenderTaskPostProcess(renderSettings, postProcess);
    
    // Second pass.
    var areasPostProcess = BlendByArea();
    areasPostProcess.DiagEnabled = this.EnableDiagnols;
    if (this.TargetTexture == SMAARenderTargets.Area)
      areasPostProcess.DebugMode = true;
    areasPostProcess.EdgesTexture = edges.Texture;
    areasPostProcess.SearchTexture = Texture.SearchTex;
    areasPostProcess.AreaTexture = Texture.AreaTex;
    areasPostProcess.SearchSamples = 16.0;
    renderSettings.ColorTarget = areas;
    event.AddRenderTaskClearTarget(renderSettings, this.ClearColor, 1.0);
    event.AddRenderTaskPostProcess(renderSettings, areasPostProcess);
    
    // Final pass, needs non-Linear space.
    this.LinearToGamma(event, lightBuffer, colorCopy);
    
    var blendPostProcess = NeighborhoodBlend();
    blendPostProcess.AreaTexture = areas.Texture;
    blendPostProcess.ColorTexture = colorCopy.Texture;
    renderSettings.ColorTarget = finalBlend;
    event.AddRenderTaskClearTarget(renderSettings, this.ClearColor, 1.0);
    event.AddRenderTaskPostProcess(renderSettings, blendPostProcess);

    // Finally, copy to render output.
    var renderPass = CopyTarget();

    // Debug options
    if (this.TargetTexture == SMAARenderTargets.FinalBlend)
      renderPass.Texture = finalBlend.Texture;
    if (this.TargetTexture == SMAARenderTargets.Area)
      renderPass.Texture = areas.Texture;
    if (this.TargetTexture == SMAARenderTargets.Edge)
      renderPass.Texture = edges.Texture;
      
    renderSettings.ColorTarget = colorCopy;
    event.AddRenderTaskClearTarget(renderSettings, this.ClearColor, 1.0);
    event.AddRenderTaskPostProcess(renderSettings, renderPass);
    
    // The renderer must be doing a final LinearToGamma pass in Deferred Renderer.
    this.GammaToLinear(event, colorCopy, lightBuffer);

    // Release the rendertargets used for SMAA.
    colorCopy.Release();
    edges.Release();
    areas.Release();
    finalBlend.Release();
  }
}

// Settings Enums.
enum SMAARenderTargets
{
  Edge,
  Area,
  FinalBlend
}

enum DetectionChance
{
  High,
  Medium
}