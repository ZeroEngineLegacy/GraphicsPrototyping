// [Paper] http://jcgt.org/published/0002/02/09/paper.pdf
// [Blog] http://casual-effects.blogspot.com/2014/03/weighted-blended-order-independent.html

[Pixel][RenderPass]
struct WeighPass
{
  [Input] var Color : Real4 = Real4(1.0, 0.0, 0.0, 1.0);
  [Input] var DepthRangeSetting : Real = 200.0;
  [FragmentInput][StageInput] var ViewPosition : Real3;

  [Output] var Target0 : Real4;
  [Output] var Target1 : Real4;

  function Main()
  {
    // Get the viewspace depth of the current pixel.
    var depth = Math.Abs(this.ViewPosition.Z);
    
    // Color values are between 0-1.
    var color = this.Color;
    
    // Increase if distant transparencies are blending together too much.
    // This is something that depends on the viewspace depth units and can be tweaked 
    // for better results.
    var depthRangeSetting = Math.Clamp(this.DepthRangeSetting, 100.0, 300.0);
    var depthStrengthSetting = 6.0;
    
    // Calculate the actual weight, this is part of the accum texture computation.
    // Clamp((Range Adjustment)/(NoZeroDiv + DepthScale), Min(Underflow16f), Max(Overflow16f));
    var w = Math.Clamp(0.3 / (1e-5 + Math.Pow(depth/depthRangeSetting, depthStrengthSetting)), 1e-2, 3e3);
    // Scale the weight by maximum coverage.
    var maxColorTimesAlpha = Math.Min(1.0, Math.Max(Math.Max(color.X, color.Y), color.Z) * color.W);
    w *= Math.Max(maxColorTimesAlpha, color.W);
    
    // Scale the accum texure result by the above computed weight.
    this.Target0 = Real4(color.XYZ  * color.W, color.W) * w;
    // Also store the revealage coverage for the composite pass.
    this.Target1 = Real4(color.W);
  }
}
