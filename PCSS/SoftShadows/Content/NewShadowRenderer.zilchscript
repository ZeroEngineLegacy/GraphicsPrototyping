// Outputs scene depth to a texture to use in shadow mapping.
[RunInEditor]
class NewShadowRenderer : ZilchComponent
{
  
  [Property] var ResolutionValue : ShadowResolution = ShadowResolution.High;
  [ShaderInput("PCSSMapping", "LightTransform")] var LightTransform : Real4x4;
  [ShaderInput("PCSSMapping", "ShadowBuffer")] var ShadowBuffer : Texture;
  [Property][ShaderInput("PCSSMapping", "NormalOffsetBias")] var NormalOffsetBias : Real = 0.1;
  
  // Some new functionality.
  [Property] var Pcss : Boolean = false;
  [Property] var LightSize : Real;
  var ShadowBufferPoint : Texture;
  var ShadowResolution : Integer = 0;
  
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Owner, Events.RenderTasksUpdate, this.OnRenderTasksUpdate);
  }

  function OnRenderTasksUpdate(event : RenderTasksEvent)
  {
    this.SetShadowResolution();
    this.LightTransform = event.CameraViewportCog.CameraViewport.WorldToPerspective;
    this.ShadowBuffer = event.CameraViewportCog.CameraViewport.FinalTexture;
    
    var samplerSettings = SamplerSettings();
    samplerSettings.Filtering = TextureFiltering.Bilinear;
    samplerSettings.AddressingX = TextureAddressing.Mirror;
    samplerSettings.AddressingY = TextureAddressing.Mirror;
    samplerSettings.CompareMode = TextureCompareMode.Enabled;
    samplerSettings.CompareFunc = TextureCompareFunc.LessEqual;
    var depth = event.GetFinalTarget(Integer2(this.ShadowResolution), TextureFormat.Depth32, samplerSettings);
    
    samplerSettings.Filtering = TextureFiltering.Nearest;
    samplerSettings.CompareMode = TextureCompareMode.Disabled;
    var depth2 = event.GetRenderTarget(Integer2(this.ShadowResolution), TextureFormat.Depth32, samplerSettings);
    
    var shadowSettings = RenderSettings();
    shadowSettings.DepthTarget = depth;
    shadowSettings.DepthSettings.DepthMode = DepthMode.Write;
    shadowSettings.DepthSettings.DepthCompareFunc = TextureCompareFunc.LessEqual;
    event.AddRenderTaskClearTarget(depth, 1.0);
    event.AddRenderTaskRenderPass(shadowSettings, RenderGroup.ShadowCasters, NoPixelOutput());
    
    shadowSettings.DepthTarget = depth2;
    shadowSettings.DepthSettings.DepthMode = DepthMode.Write;
    shadowSettings.DepthSettings.DepthCompareFunc = TextureCompareFunc.LessEqual;
    event.AddRenderTaskClearTarget(depth2, 1.0);
    event.AddRenderTaskRenderPass(shadowSettings, RenderGroup.ShadowCasters, NoPixelOutput());
    
    this.ShadowBufferPoint = depth2.Texture;
  }
  
  function SetShadowResolution()
  {
    if (this.ResolutionValue == ShadowResolution.Low)
      this.ShadowResolution = 1024;
    else if (this.ResolutionValue == ShadowResolution.Medium)
      this.ShadowResolution = 2048;
    else if (this.ResolutionValue == ShadowResolution.High)
      this.ShadowResolution = 4096;
  }
}

// Sizes for shadow map.
enum NewShadowResolution
{
  Low,
  Medium,
  High
}
